/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_EXP_H
#define _MOCK_EXP_H

#include "unity.h"
#include "exp.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_exp_Init(void);
void mock_exp_Destroy(void);
void mock_exp_Verify(void);




#define fmod_IgnoreAndReturn(cmock_retval) fmod_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void fmod_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, double cmock_to_return);
#define fmod_StopIgnore() fmod_CMockStopIgnore()
void fmod_CMockStopIgnore(void);
#define fmod_ExpectAndReturn(number, denom, cmock_retval) fmod_CMockExpectAndReturn(__LINE__, number, denom, cmock_retval)
void fmod_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, double number, double denom, double cmock_to_return);
typedef double (* CMOCK_fmod_CALLBACK)(double number, double denom, int cmock_num_calls);
void fmod_AddCallback(CMOCK_fmod_CALLBACK Callback);
void fmod_Stub(CMOCK_fmod_CALLBACK Callback);
#define fmod_StubWithCallback fmod_Stub
#define log_IgnoreAndReturn(cmock_retval) log_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void log_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, double cmock_to_return);
#define log_StopIgnore() log_CMockStopIgnore()
void log_CMockStopIgnore(void);
#define log_ExpectAndReturn(x, cmock_retval) log_CMockExpectAndReturn(__LINE__, x, cmock_retval)
void log_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, double x, double cmock_to_return);
typedef double (* CMOCK_log_CALLBACK)(double x, int cmock_num_calls);
void log_AddCallback(CMOCK_log_CALLBACK Callback);
void log_Stub(CMOCK_log_CALLBACK Callback);
#define log_StubWithCallback log_Stub
#define exp_IgnoreAndReturn(cmock_retval) exp_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void exp_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, double cmock_to_return);
#define exp_StopIgnore() exp_CMockStopIgnore()
void exp_CMockStopIgnore(void);
#define exp_ExpectAndReturn(x, cmock_retval) exp_CMockExpectAndReturn(__LINE__, x, cmock_retval)
void exp_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, double x, double cmock_to_return);
typedef double (* CMOCK_exp_CALLBACK)(double x, int cmock_num_calls);
void exp_AddCallback(CMOCK_exp_CALLBACK Callback);
void exp_Stub(CMOCK_exp_CALLBACK Callback);
#define exp_StubWithCallback exp_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
